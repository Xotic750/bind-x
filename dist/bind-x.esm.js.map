{"version":3,"sources":["../src/bind-x.js"],"names":[],"mappings":"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","file":"bind-x.esm.js","sourcesContent":["import assertIsFunction from 'assert-is-function-x';\nimport slice from 'array-slice-x';\nimport attempt from 'attempt-x';\nimport isPrimitive from 'is-primitive';\n\nconst nb = assertIsFunction.bind;\nconst nativeBind = typeof nb === 'function' && nb;\n\nlet isWorking;\n\nif (nativeBind) {\n  /* eslint-disable-next-line no-void */\n  let gra = void 0;\n  /* eslint-disable-next-line no-void */\n  let context = void 0;\n  /* eslint-disable-next-line no-unused-vars */\n  const fn = function fn(arg1, arg2) {\n    /* eslint-disable-next-line babel/no-invalid-this */\n    context = this;\n    gra = arg1;\n\n    /* eslint-disable-next-line prefer-rest-params */\n    return arguments;\n  };\n\n  const testThis = [];\n  let res = attempt.call(fn, nativeBind, testThis, 1);\n  isWorking = res.threw === false && typeof res.value === 'function';\n\n  if (isWorking) {\n    res = attempt(res.value, 2, 3);\n    isWorking = res.threw === false && gra === 1 && context === testThis && res.value.length === 3;\n  }\n\n  if (isWorking) {\n    const oracle = [1, 2, 3];\n\n    const Ctr = function Ctr() {\n      isWorking = this !== oracle;\n\n      return oracle;\n    };\n\n    res = attempt.call(Ctr, nativeBind, null);\n    isWorking = res.threw === false && typeof res.value === 'function';\n\n    if (isWorking) {\n      res = attempt(() => {\n        /* eslint-disable-next-line babel/new-cap,new-cap */\n        return new res.value();\n      });\n\n      if (isWorking) {\n        isWorking = res.threw === false && res.value === oracle;\n      }\n    }\n  }\n}\n\n/* eslint-disable-next-line no-unused-vars */\nconst patchedBind = function bind(target, thisArg) {\n  /* eslint-disable-next-line prefer-rest-params */\n  return nativeBind.apply(assertIsFunction(target), slice(arguments, 1));\n};\n\nconst concat = function concat(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = slice(a);\n  result.length += bLength;\n  for (let index = 0; index < bLength; index += 1) {\n    result[aLength + index] = b[index];\n  }\n\n  return result;\n};\n\n/* eslint-disable-next-line lodash/prefer-noop */\nconst Empty = function Empty() {};\n\nexport const implementation = function bind(target, thisArg) {\n  assertIsFunction(target);\n  /* eslint-disable-next-line prefer-rest-params */\n  const args = slice(arguments, 2);\n  let bound;\n\n  const binder = function _binder() {\n    /* eslint-disable-next-line babel/no-invalid-this */\n    if (this instanceof bound) {\n      /* eslint-disable-next-line babel/no-invalid-this,prefer-rest-params */\n      const result = target.apply(this, concat(args, arguments));\n\n      /* eslint-disable-next-line babel/no-invalid-this */\n      return isPrimitive(result) ? this : result;\n    }\n\n    /* eslint-disable-next-line prefer-rest-params */\n    return target.apply(thisArg, concat(args, arguments));\n  };\n\n  let boundLength = target.length - args.length;\n\n  if (boundLength < 0) {\n    boundLength = 0;\n  }\n\n  const lastIndex = boundLength - 1;\n  let boundArgs = '';\n  for (let index = 0; index < boundLength; index += 1) {\n    boundArgs += `$_${index}_$${index < lastIndex ? ',' : ''}`;\n  }\n\n  /* eslint-disable-next-line no-new-func */\n  bound = Function('binder', 'slice', `return function (${boundArgs}){ return binder.apply(this,slice(arguments)); }`)(\n    binder,\n    slice,\n  );\n\n  if (target.prototype) {\n    Empty.prototype = target.prototype;\n    bound.prototype = new Empty();\n    Empty.prototype = null;\n  }\n\n  return bound;\n};\n\n/**\n * The bind() method creates a new function that, when called, has its this\n * keyword set to the provided value, with a given sequence of arguments\n * preceding any provided when the new function is called.\n *\n * @param {Function} target - The target function.\n * @param {*} thisArg - The value to be passed as the this parameter to the target\n *  function when the bound function is called. The value is ignored if the\n *  bound function is constructed using the new operator.\n * @param {*} [args] - Arguments to prepend to arguments provided to the bouund\n *  function when invoking the target function.\n * @throws {TypeError} If target is not a function.\n * @returns {Function} The bound function.\n */\nconst $bind = isWorking ? patchedBind : implementation;\n\nexport default $bind;\n"]}