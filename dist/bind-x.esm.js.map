{"version":3,"sources":["../src/bind-x.js"],"names":[],"mappings":"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","file":"bind-x.esm.js","sourcesContent":["import hasWorkingBind from 'has-working-bind-x';\nimport assertIsFunction from 'assert-is-function-x';\nimport slice from 'array-slice-x';\nimport isPrimitive from 'is-primitive-x';\n\nconst {bind: nativeBind, apply} = assertIsFunction;\nconst methodizedBind = hasWorkingBind ? apply.bind(nativeBind) : null;\n\n/* eslint-disable-next-line no-unused-vars */\nconst patchedBind = function bind(target, thisArg) {\n  /* eslint-disable-next-line prefer-rest-params */\n  return methodizedBind(assertIsFunction(target), slice(arguments, 1));\n};\n\nconst concat = function concat(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = slice(a);\n  result.length += bLength;\n  for (let index = 0; index < bLength; index += 1) {\n    result[aLength + index] = b[index];\n  }\n\n  return result;\n};\n\n/* eslint-disable-next-line lodash/prefer-noop */\nconst Empty = function Empty() {};\n\nconst getBoundArgs = function getBoundArgs(target, args) {\n  let boundLength = target.length - args.length;\n\n  if (boundLength < 0) {\n    boundLength = 0;\n  }\n\n  const lastIndex = boundLength - 1;\n  let boundArgs = '';\n  for (let index = 0; index < boundLength; index += 1) {\n    boundArgs += `$_${index}_$${index < lastIndex ? ',' : ''}`;\n  }\n\n  return boundArgs;\n};\n\nconst getBound = function getBound(boundArgs, binder) {\n  /* eslint-disable-next-line no-new-func */\n  return Function('binder', 'slice', `return function (${boundArgs}){ return binder.apply(this,slice(arguments)); }`)(\n    binder,\n    slice,\n  );\n};\n\nconst setProto = function setProto(target, bound) {\n  if (target.prototype) {\n    Empty.prototype = target.prototype;\n    bound.prototype = new Empty();\n    Empty.prototype = null;\n  }\n\n  return bound;\n};\n\nexport const implementation = function bind(target, thisArg) {\n  assertIsFunction(target);\n  /* eslint-disable-next-line prefer-rest-params */\n  const args = slice(arguments, 2);\n  let bound;\n\n  const binder = function binder() {\n    /* eslint-disable-next-line babel/no-invalid-this */\n    if (this instanceof bound) {\n      /* eslint-disable-next-line babel/no-invalid-this,prefer-rest-params */\n      const result = target.apply(this, concat(args, arguments));\n\n      /* eslint-disable-next-line babel/no-invalid-this */\n      return isPrimitive(result) ? this : result;\n    }\n\n    /* eslint-disable-next-line prefer-rest-params */\n    return target.apply(thisArg, concat(args, arguments));\n  };\n\n  const boundArgs = getBoundArgs(target, args);\n  bound = getBound(boundArgs, binder);\n\n  return setProto(target, bound);\n};\n\n/**\n * The bind() method creates a new function that, when called, has its this\n * keyword set to the provided value, with a given sequence of arguments\n * preceding any provided when the new function is called.\n *\n * @function bind\n * @param {Function} target - The target function.\n * @param {*} thisArg - The value to be passed as the this parameter to the target\n *  function when the bound function is called. The value is ignored if the\n *  bound function is constructed using the new operator.\n * @param {*} [args] - Arguments to prepend to arguments provided to the bound\n *  function when invoking the target function.\n * @throws {TypeError} If target is not a function.\n * @returns {Function} The bound function.\n */\nconst $bind = hasWorkingBind ? patchedBind : implementation;\n\nexport default $bind;\n"]}