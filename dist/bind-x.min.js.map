{"version":3,"sources":["webpack://bindX/webpack/universalModuleDefinition","webpack://bindX/webpack/bootstrap","webpack://bindX/./node_modules/is-symbol/index.js","webpack://bindX/./node_modules/is-primitive/index.js","webpack://bindX/./node_modules/is-string/index.js","webpack://bindX/./node_modules/is-arguments/index.js","webpack://bindX/./node_modules/is-date-object/index.js","webpack://bindX/./node_modules/has-symbols/index.js","webpack://bindX/(webpack)/buildin/global.js","webpack://bindX/./node_modules/has-symbols/shams.js","webpack://bindX/../src/attempt-x.js","webpack://bindX/../src/to-boolean-x.js","webpack://bindX/../src/to-string-tag-x.js","webpack://bindX/../src/white-space-x.js","webpack://bindX/../src/has-symbol-support-x.js","webpack://bindX/../src/has-to-string-tag-x.js","webpack://bindX/../src/is-nil-x.js","webpack://bindX/../src/require-object-coercible-x.js","webpack://bindX/../src/to-string-x.js","webpack://bindX/../src/require-coercible-to-string-x.js","webpack://bindX/../src/array-slice-x.js","webpack://bindX/../src/trim-left-x.js","webpack://bindX/../src/trim-right-x.js","webpack://bindX/../src/trim-x.js","webpack://bindX/../src/normalize-space-x.js","webpack://bindX/../src/replace-comments-x.js","webpack://bindX/../src/is-function-x.js","webpack://bindX/../src/to-string-symbols-supported-x.js","webpack://bindX/../src/assert-is-function-x.js","webpack://bindX/../src/to-object-x.js","webpack://bindX/../src/is-array-x.js","webpack://bindX/../src/to-primitive-x.js","webpack://bindX/../src/parse-int-x.js","webpack://bindX/../src/nan-x.js","webpack://bindX/../src/to-number-x.js","webpack://bindX/../src/is-nan-x.js","webpack://bindX/../src/is-finite-x.js","webpack://bindX/../src/infinity-x.js","webpack://bindX/../src/math-sign-x.js","webpack://bindX/../src/to-integer-x.js","webpack://bindX/../src/to-length-x.js","webpack://bindX/../src/has-boxed-string-x.js","webpack://bindX/../src/split-if-boxed-bug-x.js","webpack://bindX/../src/array-like-slice-x.js","webpack://bindX/../src/bind-x.js"],"names":["root","factory","exports","module","define","amd","self","window","global","Function","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","toStr","toString","symToStr","symStringRegex","valueOf","test","isSymbolObject","e","val","strValue","String","hasToStringTag","tryStringObject","isStandardArguments","isLegacyArguments","length","callee","supportsStandardArguments","arguments","getDay","Date","tryDateObject","origSymbol","hasSymbolSham","g","this","getOwnPropertySymbols","iterator","obj","sym","symObj","keys","getOwnPropertyNames","syms","propertyIsEnumerable","getOwnPropertyDescriptor","descriptor","attempt_x_esm","fn","_len","args","Array","_key","threw","apply","to_boolean_x_esm","nativeObjectToString","to_string_tag_x_esm","hasSymbolSupport","_newArrowCheck","is_symbol_default","undefined","has_symbol_support_x_esm","has_to_string_tag_x_esm","is_nil_x_esm","require_object_coercible_x_esm","TypeError","concat","ERROR_MESSAGE","castString","constructor","to_string_x_esm","require_coercible_to_string_x_esm","list","code","description","es5","es2015","es2016","es2017","es2018","string","stringES2018","white_space_x_esm_length","white_space_x_esm_i","res","doc","resultDocElement","white_space_x_esm","reLeft","RegExpCtr","replace","trim_left_x_esm","reRight2018","trim_right_x_esm_RegExpCtr","trim_right_x_esm_replace","trim_right_x_esm","trim_x_esm","reNormalize2018","normalize_space_x_esm_RegExpCtr","normalize_space_x_esm_replace","normalize_space_x_esm","STRIP_COMMENTS","replace_comments_x_esm_replace","replace_comments_x_esm","replacement","FunctionCtr","fToString","ctrRx","hasNativeClass","is_function_x_esm_testClassString","isES6ClassFn","result","is_function_x_esm","allowClass","is_primitive_default","tryFuncToString","strTag","is_function_x_esm_compareTags","pToString","isSymbolFn","a","to_string_symbols_supported_x_esm_castString","to_string_symbols_supported_x_esm","assert_is_function_x_esm","callback","msg","castObject","to_object_x_esm","nia","isArray","nativeIsArray","testResult","is_array_x_esm","StringCtr","NumberCtr","symToPrimitive","toPrimitive","symValueOf","toStringOrder","toNumberOrder","to_primitive_x_esm_ordinaryToPrimitive","ordinary","hint","assertHint","method","methodNames","getHint","supplied","to_primitive_x_esm_getExoticToPrim","func","to_primitive_x_esm_getMethod","to_primitive_x_esm_evalExotic","exoticToPrim","input","to_primitive_x_esm_evalPrimitive","newHint","is_date_object_default","to_primitive_x_esm","preferredType","nativeParseInt","parseInt","castNumber","charAt","hexRegex","parse_int_x_esm_test","parse_int_x_esm","radix","str","to_number_x_esm_castNumber","pStrSlice","slice","binaryRegex","to_number_x_esm_test","octalRegex","nonWSregex","RegExpConstructor","invalidHexLiteral","to_number_x_esm_parseBase","parseString","toNum","isBinary","isOctal","to_number_x_esm_convertString","hasNonWS","isInvalidHexLiteral","trimmed","to_number_x_esm","toNumber","argument","to_number_x_esm_assertNotSymbol","is_nan_x_esm","is_finite_x_esm","number","math_sign_x_esm","x","abs","Math","floor","to_integer_x_esm","to_length_x_esm","len","boxedString","has_boxed_string_x_esm","strSplit","split","isStringFn","is_string_default","split_if_boxed_bug_x_esm","getMax","b","setRelative","array_like_slice_x_esm","arrayLike","start","end","iterable","k","relativeEnd","finalEnd","next","nativeSlice","failArray","failString","array_slice_x_esm_testString","failDOM","document","documentElement","array_slice_x_esm","array","is_arguments_default","bind_x_esm_isWorking","nb","nativeBind","gra","context","testThis","bind_x_esm_res","arg1","arg2","oracle","bind_x_esm_newArrowCheck","bind_x_esm_concat","aLength","bLength","index","Empty","bind_x_esm_implementation","target","thisArg","bound","binder","boundLength","lastIndex","boundArgs","$bind","__webpack_exports__"],"mappings":"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","file":"bind-x.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bindX\"] = factory();\n\telse\n\t\troot[\"bindX\"] = factory();\n})((function () {\n  'use strict';\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  return Function('return this')();\n}()), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar hasSymbols = require('has-symbols')();\n\nif (hasSymbols) {\n\tvar symToStr = Symbol.prototype.toString;\n\tvar symStringRegex = /^Symbol\\(.*\\)$/;\n\tvar isSymbolObject = function isRealSymbolObject(value) {\n\t\tif (typeof value.valueOf() !== 'symbol') {\n\t\t\treturn false;\n\t\t}\n\t\treturn symStringRegex.test(symToStr.call(value));\n\t};\n\n\tmodule.exports = function isSymbol(value) {\n\t\tif (typeof value === 'symbol') {\n\t\t\treturn true;\n\t\t}\n\t\tif (toStr.call(value) !== '[object Symbol]') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn isSymbolObject(value);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n} else {\n\n\tmodule.exports = function isSymbol(value) {\n\t\t// this environment does not support Symbols.\n\t\treturn false && value;\n\t};\n}\n","/*!\n * is-primitive <https://github.com/jonschlinkert/is-primitive>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isPrimitive(val) {\n  if (typeof val === 'object') {\n    return val === null;\n  }\n  return typeof val !== 'function';\n};\n","'use strict';\n\nvar strValue = String.prototype.valueOf;\nvar tryStringObject = function tryStringObject(value) {\n\ttry {\n\t\tstrValue.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar strClass = '[object String]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isString(value) {\n\tif (typeof value === 'string') { return true; }\n\tif (typeof value !== 'object') { return false; }\n\treturn hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;\n};\n","'use strict';\n\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nvar toStr = Object.prototype.toString;\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn toStr.call(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\ttoStr.call(value) !== '[object Array]' &&\n\t\ttoStr.call(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n","'use strict';\n\nvar getDay = Date.prototype.getDay;\nvar tryDateObject = function tryDateObject(value) {\n\ttry {\n\t\tgetDay.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nvar toStr = Object.prototype.toString;\nvar dateClass = '[object Date]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isDateObject(value) {\n\tif (typeof value !== 'object' || value === null) { return false; }\n\treturn hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;\n};\n","'use strict';\n\nvar origSymbol = global.Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict';\n\n/* eslint complexity: [2, 17], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","/**\n * This method attempts to invoke the function, returning either the result or\n * the caught error object. Any additional arguments are provided to the\n * function when it's invoked.\n *\n * @param {Function} [fn] - The function to attempt.\n * @param {...*} [args] - The arguments to invoke the function with.\n * @returns {object} Returns an object of the result.\n */\nconst attempt = function attempt(fn, ...args) {\n  try {\n    return {\n      threw: false,\n      /* eslint-disable-next-line babel/no-invalid-this */\n      value: fn.apply(this, args),\n    };\n  } catch (e) {\n    return {\n      threw: true,\n      value: e,\n    };\n  }\n};\n\nexport default attempt;\n","/**\n * The abstract operation ToBoolean converts argument to a value of type Boolean.\n *\n * @param {*} [value] - The value to be converted.\n * @returns {boolean} 'true' if value is truthy; otherwise 'false'.\n */\nconst toBoolean = function toBoolean(value) {\n  return !!value;\n};\n\nexport default toBoolean;\n","const nativeObjectToString = {}.toString;\n\n/**\n * The `toStringTag` method returns \"[object type]\", where type is the\n * object type.\n *\n * @param {*} [value] - The object of which to get the object type string.\n * @returns {string} The object type string.\n */\nconst toStringTag = function toStringTag(value) {\n  if (value === null) {\n    return '[object Null]';\n  }\n\n  if (typeof value === 'undefined') {\n    return '[object Undefined]';\n  }\n\n  return nativeObjectToString.call(value);\n};\n\nexport default toStringTag;\n","/**\n * A record of a white space character.\n *\n * @typedef {object} CharRecord\n * @property {number} code - The character code.\n * @property {string} description - A description of the character.\n * @property {boolean} es5 - Whether the spec lists this as a white space.\n * @property {boolean} es2015 - Whether the spec lists this as a white space.\n * @property {boolean} es2016 - Whether the spec lists this as a white space.\n * @property {boolean} es2017 - Whether the spec lists this as a white space.\n * @property {boolean} es2018 - Whether the spec lists this as a white space.\n * @property {string} string - The character string.\n */\n\n/**\n * An array of the whitespace char codes, string, descriptions and language\n * presence in the specifications.\n *\n * @type Array.<CharRecord>\n */\nexport const list = [\n  {\n    code: 0x0009,\n    description: 'Tab',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u0009',\n  },\n  {\n    code: 0x000a,\n    description: 'Line Feed',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000a',\n  },\n  {\n    code: 0x000b,\n    description: 'Vertical Tab',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000b',\n  },\n  {\n    code: 0x000c,\n    description: 'Form Feed',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000c',\n  },\n  {\n    code: 0x000d,\n    description: 'Carriage Return',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000d',\n  },\n  {\n    code: 0x0020,\n    description: 'Space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u0020',\n  },\n  /*\n  {\n    code: 0x0085,\n    description: 'Next line',\n    es5: false,\n    es2015: false,\n    es2016: false,\n    es2017: false,\n    es2018: false,\n    string: '\\u0085'\n  }\n  */\n  {\n    code: 0x00a0,\n    description: 'No-break space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u00a0',\n  },\n  {\n    code: 0x1680,\n    description: 'Ogham space mark',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u1680',\n  },\n  {\n    code: 0x180e,\n    description: 'Mongolian vowel separator',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: false,\n    es2018: false,\n    string: '\\u180e',\n  },\n  {\n    code: 0x2000,\n    description: 'En quad',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2000',\n  },\n  {\n    code: 0x2001,\n    description: 'Em quad',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2001',\n  },\n  {\n    code: 0x2002,\n    description: 'En space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2002',\n  },\n  {\n    code: 0x2003,\n    description: 'Em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2003',\n  },\n  {\n    code: 0x2004,\n    description: 'Three-per-em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2004',\n  },\n  {\n    code: 0x2005,\n    description: 'Four-per-em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2005',\n  },\n  {\n    code: 0x2006,\n    description: 'Six-per-em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2006',\n  },\n  {\n    code: 0x2007,\n    description: 'Figure space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2007',\n  },\n  {\n    code: 0x2008,\n    description: 'Punctuation space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2008',\n  },\n  {\n    code: 0x2009,\n    description: 'Thin space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2009',\n  },\n  {\n    code: 0x200a,\n    description: 'Hair space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u200a',\n  },\n  /*\n  {\n    code: 0x200b,\n    description: 'Zero width space',\n    es5: false,\n    es2015: false,\n    es2016: false,\n    es2017: false,\n    es2018: false,\n    string: '\\u200b'\n  },\n  */\n  {\n    code: 0x2028,\n    description: 'Line separator',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2028',\n  },\n  {\n    code: 0x2029,\n    description: 'Paragraph separator',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2029',\n  },\n  {\n    code: 0x202f,\n    description: 'Narrow no-break space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u202f',\n  },\n  {\n    code: 0x205f,\n    description: 'Medium mathematical space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u205f',\n  },\n  {\n    code: 0x3000,\n    description: 'Ideographic space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u3000',\n  },\n  {\n    code: 0xfeff,\n    description: 'Byte Order Mark',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\ufeff',\n  },\n];\n\n/**\n * A string of the ES5 to ES2016 whitespace characters.\n *\n * @type string\n */\nlet stringES2016 = '';\n\n/**\n * A string of the ES2017 to ES2018 whitespace characters.\n *\n * @type string\n */\nlet stringES2018 = '';\nconst {length} = list;\nfor (let i = 0; i < length; i += 1) {\n  if (list[i].es2016) {\n    stringES2016 += list[i].string;\n  }\n\n  if (list[i].es2018) {\n    stringES2018 += list[i].string;\n  }\n}\n\nconst string2018 = stringES2018;\n\nexport default string2018;\nexport const string2016 = stringES2016;\n","import attempt from 'attempt-x';\nimport isSymbol from 'is-symbol';\n\nconst hasSymbolSupport = attempt(() => {\n  /* eslint-disable-next-line compat/compat */\n  return typeof Symbol === 'function' && isSymbol(Symbol(''));\n});\n\n/**\n * Indicates if `Symbol`exists and creates the correct type.\n * `true`, if it exists and creates the correct type, otherwise `false`.\n *\n * @type boolean\n */\nexport default hasSymbolSupport.threw === false && hasSymbolSupport.value === true;\n","import hasSymbols from 'has-symbol-support-x';\nimport isSymbol from 'is-symbol';\n\n/**\n * Indicates if `Symbol.toStringTag`exists and is the correct type.\n * `true`, if it exists and is the correct type, otherwise `false`.\n *\n * @type boolean\n */\nexport default hasSymbols &&\n  /* eslint-disable-next-line compat/compat */\n  isSymbol(Symbol.toStringTag);\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @param {*} [value] - The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n */\nconst isNil = function isNil(value) {\n  /* eslint-disable-next-line lodash/prefer-is-nil */\n  return value === null || typeof value === 'undefined';\n};\n\nexport default isNil;\n","import isNil from 'is-nil-x';\n\n/**\n * The abstract operation RequireObjectCoercible throws an error if argument\n * is a value that cannot be converted to an Object using ToObject.\n *\n * @param {*} [value] - The `value` to check.\n * @throws {TypeError} If `value` is a `null` or `undefined`.\n * @returns {string} The `value`.\n */\nconst requireObjectCoercible = function requireObjectCoercible(value) {\n  if (isNil(value)) {\n    throw new TypeError(`Cannot call method on ${value}`);\n  }\n\n  return value;\n};\n\nexport default requireObjectCoercible;\n","import isSymbol from 'is-symbol';\n\nconst ERROR_MESSAGE = 'Cannot convert a Symbol value to a string';\nconst castString = ERROR_MESSAGE.constructor;\n/**\n * The abstract operation ToString converts argument to a value of type String.\n *\n * @param {*} [value] - The value to convert to a string.\n * @throws {TypeError} If `value` is a Symbol.\n * @returns {string} The converted value.\n */\nconst ToString = function ToString(value) {\n  if (isSymbol(value)) {\n    throw new TypeError(ERROR_MESSAGE);\n  }\n\n  return castString(value);\n};\n\nexport default ToString;\n","import requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\n\n/**\n * This method requires an argument is corecible then converts using ToString.\n *\n * @param {*} [value] - The value to converted to a string.\n * @throws {TypeError} If value is null or undefined.\n * @returns {string} The value as a string.\n */\nconst requireCoercibleToString = function requireCoercibleToString(value) {\n  return toStr(requireObjectCoercible(value));\n};\n\nexport default requireCoercibleToString;\n","import toObject from 'to-object-x';\nimport isArguments from 'is-arguments';\nimport isArray from 'is-array-x';\nimport arrayLikeSlice from 'array-like-slice-x';\nimport attempt from 'attempt-x';\nimport isString from 'is-string';\n\nconst nativeSlice = [].slice;\n\nconst testArray = function testArray() {\n  const res = attempt.call([1, 2, 3], nativeSlice, 1, 2);\n\n  return res.threw || isArray(res.value) === false || res.value.length !== 1 || res.value[0] !== 2;\n};\n\nconst testString = function testString() {\n  const res = attempt.call('abc', nativeSlice, 1, 2);\n\n  return res.threw || isArray(res.value) === false || res.value.length !== 1 || res.value[0] !== 'b';\n};\n\nconst testDOM = function testDOM() {\n  const doc = typeof document !== 'undefined' && document;\n  const resultDocElement = doc ? attempt.call(doc.documentElement, nativeSlice).threw : false;\n\n  return resultDocElement ? resultDocElement.threw : false;\n};\n\nconst failArray = testArray();\nconst failString = testString();\nconst failDOM = testDOM();\n\n/**\n * The slice() method returns a shallow copy of a portion of an array into a new\n * array object selected from begin to end (end not included). The original\n * array will not be modified.\n *\n * @param {Array|object} array - The array to slice.\n * @param {number} [start] - Zero-based index at which to begin extraction.\n *  A negative index can be used, indicating an offset from the end of the\n *  sequence. Running slice(-2) extracts the last two elements in the sequence.\n *  If begin is undefined, slice begins from index 0.\n * @param {number} [end] - Zero-based index before which to end extraction.\n *  Slice extracts up to but not including end. For example, slice(1,4)\n *  extracts the second element through the fourth element (elements indexed\n *  1, 2, and 3).\n *  A negative index can be used, indicating an offset from the end of the\n *  sequence. Running slice(2,-1) extracts the third element through the second-to-last\n *  element in the sequence.\n *  If end is omitted, slice extracts through the end of the\n *  sequence (arr.length).\n *  If end is greater than the length of the sequence, slice extracts through\n *  the end of the sequence (arr.length).\n * @returns {Array} A new array containing the extracted elements.\n */\nconst slice = function slice(array, start, end) {\n  const object = toObject(array);\n\n  if (failArray || (failDOM && isArray(object) === false) || (failString && isString(object)) || isArguments(object)) {\n    return arrayLikeSlice(object, start, end);\n  }\n\n  /* eslint-disable-next-line prefer-rest-params */\n  return nativeSlice.apply(object, arrayLikeSlice(arguments, 1));\n};\n\nexport default slice;\n","import requireCoercibleToString from 'require-coercible-to-string-x';\nimport whiteSpace from 'white-space-x';\n\nconst EMPTY_STRING = '';\nconst RegExpCtr = /none/.constructor;\nconst reLeft = new RegExpCtr(`^[${whiteSpace}]+`);\nconst {replace} = EMPTY_STRING;\n/**\n * This method removes whitespace from the start of a string. (ES2019).\n *\n * @param {string} [string] - The string to trim the left end whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The left trimmed string.\n */\nconst trimStart = function trimStart(string) {\n  return replace.call(requireCoercibleToString(string), reLeft, EMPTY_STRING);\n};\n\nexport default trimStart;\n","import requireCoercibleToString from 'require-coercible-to-string-x';\nimport whiteSpace from 'white-space-x';\n\nconst EMPTY_STRING = '';\nconst RegExpCtr = /none/.constructor;\nconst reRight2018 = new RegExpCtr(`[${whiteSpace}]+$`);\nconst {replace} = EMPTY_STRING;\n\n/**\n * This method removes whitespace from the end of a string. (ES2019).\n *\n * @param {string} [string] - The string to trim the right end whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The right trimmed string.\n */\nconst trimEnd = function trimEnd(string) {\n  return replace.call(requireCoercibleToString(string), reRight2018, EMPTY_STRING);\n};\n\nexport default trimEnd;\n","import trimStart from 'trim-left-x';\nimport trimEnd from 'trim-right-x';\n\n/**\n * This method removes whitespace from the start and end of a string.\n * (ES2019).\n *\n * @param {string} [string] - The string to trim the whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The trimmed string.\n */\nconst trim = function trim(string) {\n  return trimStart(trimEnd(string));\n};\n\nexport default trim;\n","import trim from 'trim-x';\nimport whiteSpace from 'white-space-x';\n\nconst SPACE = ' ';\nconst RegExpCtr = /none/.constructor;\nconst reNormalize2018 = new RegExpCtr(`[${whiteSpace}]+`, 'g');\nconst {replace} = SPACE;\n\n/**\n * This method strips leading and trailing white-space from a string,\n * replaces sequences of whitespace characters by a single space,\n * and returns the resulting string. (ES2019).\n *\n * @param {string} [string] - The string to be normalized.\n * @throws {TypeError} If string is null or undefined or not coercible.\n */\nconst normalizeSpace = function normalizeSpace(string) {\n  return replace.call(trim(string), reNormalize2018, SPACE);\n};\n\nexport default normalizeSpace;\n","import toStr from 'to-string-x';\nimport requireCoercibleToString from 'require-coercible-to-string-x';\n\nconst EMPTY_STRING = '';\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nconst {replace} = EMPTY_STRING;\n\n/**\n * This method replaces comments in a string.\n *\n * @param {string} [string] - The string to be stripped.\n * @param {string} [replacement=''] - The string to be used as a replacement.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @throws {TypeError} If replacement is not coercible.\n * @returns {string} The new string with the comments replaced.\n */\nconst replaceComments = function replaceComments(string, replacement) {\n  return replace.call(requireCoercibleToString(string), STRIP_COMMENTS, arguments.length > 1 ? toStr(replacement) : EMPTY_STRING);\n};\n\nexport default replaceComments;\n","import attempt from 'attempt-x';\nimport toBoolean from 'to-boolean-x';\nimport toStringTag from 'to-string-tag-x';\nimport hasToStringTag from 'has-to-string-tag-x';\nimport isPrimitive from 'is-primitive';\nimport normalise from 'normalize-space-x';\nimport deComment from 'replace-comments-x';\n\nconst FunctionCtr = attempt.constructor;\nconst SPACE = ' ';\nconst fToString = attempt.toString;\nconst funcTag = '[object Function]';\nconst genTag = '[object GeneratorFunction]';\nconst asyncTag = '[object AsyncFunction]';\nconst ctrRx = /^class /;\nconst {test} = ctrRx;\n\nconst hasNativeClass =\n  attempt(function attemptee() {\n    /* eslint-disable-next-line babel/new-cap */\n    return FunctionCtr('\"use strict\"; return class My {};')();\n  }).threw === false;\n\nconst testClassString = function testClassString(value) {\n  return test.call(ctrRx, normalise(deComment(fToString.call(value), SPACE)));\n};\n\nconst isES6ClassFn = function isES6ClassFunc(value) {\n  const result = attempt(testClassString, value);\n\n  return result.threw === false && result.value;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @private\n * @param {*} value - The value to check.\n * @param {boolean} allowClass - Whether to filter ES6 classes.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n * else `false`.\n */\nconst tryFuncToString = function funcToString(value, allowClass) {\n  if (hasNativeClass && allowClass === false && isES6ClassFn(value)) {\n    return false;\n  }\n\n  return attempt.call(value, fToString).threw === false;\n};\n\nconst compareTags = function compareTags(value) {\n  const strTag = toStringTag(value);\n\n  return strTag === funcTag || strTag === genTag || strTag === asyncTag;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @param {*} value - The value to check.\n * @param {boolean} [allowClass=false] - Whether to filter ES6 classes.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n * else `false`.\n */\nconst isFunction = function isFunction(value, allowClass) {\n  if (isPrimitive(value)) {\n    return false;\n  }\n\n  if (hasToStringTag) {\n    return tryFuncToString(value, toBoolean(allowClass));\n  }\n\n  if (hasNativeClass && toBoolean(allowClass) === false && isES6ClassFn(value)) {\n    return false;\n  }\n\n  return compareTags(value);\n};\n\nexport default isFunction;\n","import hasSymbols from 'has-symbol-support-x';\nimport isSymbol from 'is-symbol';\n\n/* eslint-disable-next-line compat/compat */\nconst pToString = hasSymbols && Symbol.prototype.toString;\nconst isSymbolFn = typeof pToString === 'function' && isSymbol;\n/** @type {Function} */\nconst castString = ''.constructor;\n\n/**\n * The abstract operation ToString converts argument to a value of type String,\n * however the specification states that if the argument is a Symbol then a\n * 'TypeError' is thrown. This version also allows Symbols be converted to\n * a string. Other uncoercible exotics will still throw though.\n *\n * @param {*} [value] - The value to convert to a string.\n * @returns {string} The converted value.\n */\nconst toStringSymbolsSupported = function toStringSymbolsSupported(value) {\n  return isSymbolFn && isSymbolFn(value) ? pToString.call(value) : castString(value);\n};\n\nexport default toStringSymbolsSupported;\n","import isFunction from 'is-function-x';\nimport safeToString from 'to-string-symbols-supported-x';\nimport isPrimitive from 'is-primitive';\n\n/**\n * Tests `callback` to see if it is a function, throws a `TypeError` if it is\n * not. Otherwise returns the `callback`.\n *\n * @param {*} callback - The argument to be tested.\n * @throws {TypeError} Throws if `callback` is not a function.\n * @returns {*} Returns `callback` if it is function.\n */\nconst assertIsFunction = function assertIsFunction(callback) {\n  if (isFunction(callback) === false) {\n    const msg = isPrimitive(callback) ? safeToString(callback) : '#<Object>';\n    throw new TypeError(`${msg} is not a function`);\n  }\n\n  return callback;\n};\n\nexport default assertIsFunction;\n","import requireObjectCoercible from 'require-object-coercible-x';\n\nconst castObject = {}.constructor;\n\n/**\n * The abstract operation ToObject converts argument to a value of\n * type Object.\n *\n * @param {*} value - The `value` to convert.\n * @throws {TypeError} If `value` is a `null` or `undefined`.\n * @returns {!object} The `value` converted to an object.\n */\nconst toObject = function toObject(value) {\n  return castObject(requireObjectCoercible(value));\n};\n\nexport default toObject;\n","import attempt from 'attempt-x';\nimport toStringTag from 'to-string-tag-x';\n\nconst nia = [].isArray;\nconst nativeIsArray = typeof nia === 'function' && nia;\n\nconst testResult = attempt(function attemptee() {\n  return nativeIsArray([]) === true && nativeIsArray({length: 0}) === false;\n});\n\nconst isWorking = testResult.threw === false && testResult.value === true;\n\nexport const implementation = function isArray(value) {\n  return toStringTag(value) === '[object Array]';\n};\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to test.\n * @returns {boolean} - True if an array; otherwise false.\n */\nconst isArray = isWorking ? nativeIsArray : implementation;\n\nexport default isArray;\n","import hasSymbols from 'has-symbol-support-x';\nimport isPrimitive from 'is-primitive';\nimport isDate from 'is-date-object';\nimport isSymbol from 'is-symbol';\nimport isFunction from 'is-function-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport isNil from 'is-nil-x';\n\nconst ZERO = 0;\nconst ONE = 1;\n/* eslint-disable-next-line no-void */\nconst UNDEFINED = void ZERO;\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst DEFAULT = 'default';\nconst StringCtr = STRING.constructor;\nconst NumberCtr = ZERO.constructor;\n/* eslint-disable-next-line compat/compat */\nconst symToPrimitive = hasSymbols && Symbol.toPrimitive;\n/* eslint-disable-next-line compat/compat */\nconst symValueOf = hasSymbols && Symbol.prototype.valueOf;\n\nconst toStringOrder = ['toString', 'valueOf'];\nconst toNumberOrder = ['valueOf', 'toString'];\nconst orderLength = 2;\n\nconst assertHint = function assertHint(hint) {\n  if (typeof hint !== 'string' || (hint !== NUMBER && hint !== STRING)) {\n    throw new TypeError('hint must be \"string\" or \"number\"');\n  }\n\n  return hint;\n};\n\n/**\n * @param {*} ordinary - The ordinary to convert.\n * @param {*} hint - The hint.\n * @returns {*} - The primitive.\n */\nconst ordinaryToPrimitive = function ordinaryToPrimitive(ordinary, hint) {\n  requireObjectCoercible(ordinary);\n  assertHint(hint);\n\n  const methodNames = hint === STRING ? toStringOrder : toNumberOrder;\n  let method;\n  let result;\n  for (let i = ZERO; i < orderLength; i += ONE) {\n    method = ordinary[methodNames[i]];\n\n    if (isFunction(method)) {\n      result = method.call(ordinary);\n\n      if (isPrimitive(result)) {\n        return result;\n      }\n    }\n  }\n\n  throw new TypeError('No default value');\n};\n\n/**\n * @param {*} object - The object.\n * @param {*} property - The property.\n * @returns {undefined|Function} - The method.\n */\nconst getMethod = function getMethod(object, property) {\n  const func = object[property];\n\n  if (isNil(func) === false) {\n    if (isFunction(func) === false) {\n      throw new TypeError(`${func} returned for property ${property} of object ${object} is not a function`);\n    }\n\n    return func;\n  }\n\n  return UNDEFINED;\n};\n\n/**\n * Get the hint.\n *\n * @param {*} value - The value to compare.\n * @param {boolean} supplied - Was a value supplied.\n * @returns {string} - The hint string.\n */\nconst getHint = function getHint(value, supplied) {\n  if (supplied) {\n    if (value === StringCtr) {\n      return STRING;\n    }\n\n    if (value === NumberCtr) {\n      return NUMBER;\n    }\n  }\n\n  return DEFAULT;\n};\n\n/**\n * Get the primitive from the exotic.\n *\n * @param {*} value - The exotic.\n * @returns {*} - The primitive.\n */\nconst getExoticToPrim = function getExoticToPrim(value) {\n  if (hasSymbols) {\n    if (symToPrimitive) {\n      return getMethod(value, symToPrimitive);\n    }\n\n    if (isSymbol(value)) {\n      return symValueOf;\n    }\n  }\n\n  return UNDEFINED;\n};\n\nconst evalExotic = function evalExotic(obj) {\n  const {exoticToPrim, input, hint} = obj;\n  const result = exoticToPrim.call(input, hint);\n\n  if (isPrimitive(result)) {\n    return result;\n  }\n\n  throw new TypeError('unable to convert exotic object to primitive');\n};\n\nconst evalPrimitive = function evalPrimitive(input, hint) {\n  const newHint = hint === DEFAULT && (isDate(input) || isSymbol(input)) ? STRING : hint;\n\n  return ordinaryToPrimitive(input, newHint === DEFAULT ? NUMBER : newHint);\n};\n\n/**\n * This method converts a JavaScript object to a primitive value.\n * Note: When toPrimitive is called with no hint, then it generally behaves as\n * if the hint were Number. However, objects may over-ride this behaviour by\n * defining a @@toPrimitive method. Of the objects defined in this specification\n * only Date objects (see 20.3.4.45) and Symbol objects (see 19.4.3.4) over-ride\n * the default ToPrimitive behaviour. Date objects treat no hint as if the hint\n * were String.\n *\n * @param {*} input - The input to convert.\n * @param {Function} [preferredType] - The preferred type (String or Number).\n * @throws {TypeError} If unable to convert input to a primitive.\n * @returns {string|number} The converted input as a primitive.\n * @see {http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive}\n */\nconst toPrimitive = function toPrimitive(input, preferredType) {\n  if (isPrimitive(input)) {\n    return input;\n  }\n\n  const hint = getHint(preferredType, arguments.length > ONE);\n  const exoticToPrim = getExoticToPrim(input);\n\n  return typeof exoticToPrim === 'undefined' ? evalPrimitive(input, hint) : evalExotic({exoticToPrim, input, hint});\n};\n\nexport default toPrimitive;\n","import NAN from 'nan-x';\nimport toStr from 'to-string-x';\nimport trimLeft from 'trim-left-x';\n\nconst nativeParseInt = parseInt;\n/**  @type {Function} */\nconst castNumber = (0).constructor;\n// noinspection JSPotentiallyInvalidConstructorUsage\nconst {charAt} = '';\nconst hexRegex = /^[-+]?0[xX]/;\nconst {test} = hexRegex;\n\n/**\n * This method parses a string argument and returns an integer of the specified\n * radix (the base in mathematical numeral systems). (ES2019).\n *\n * @param {string} [string] - The value to parse. If the string argument is not a\n *  string, then it is converted to a string (using the ToString abstract\n *  operation). Leading whitespace in the string argument is ignored.\n * @param {number} [radix] - An integer between 2 and 36 that represents the radix\n *  (the base in mathematical numeral systems) of the above mentioned string.\n *  Specify 10 for the decimal numeral system commonly used by humans. Always\n *  specify this parameter to eliminate reader confusion and to guarantee\n *  predictable behavior. Different implementations produce different results\n *  when a radix is not specified, usually defaulting the value to 10.\n * @throws {TypeError} If target is a Symbol or is not coercible.\n * @returns {number} An integer number parsed from the given string. If the first\n *  character cannot be converted to a number, NaN is returned.\n */\nconst $parseInt = function $parseInt(string, radix) {\n  const str = trimLeft(toStr(string));\n\n  if (charAt.call(str, 0) === '\\u180E') {\n    return NAN;\n  }\n\n  return nativeParseInt(str, castNumber(radix) || (test.call(hexRegex, str) ? 16 : 10));\n};\n\nexport default $parseInt;\n","/**\n * The constant NaN derived mathematically by 0 / 0.\n *\n * @type number\n */\nexport default 0 / 0;\n","import isSymbol from 'is-symbol';\nimport toPrimitive from 'to-primitive-x';\nimport trim from 'trim-x';\nimport $parseInt from 'parse-int-x';\nimport NAN from 'nan-x';\n\nconst binaryRadix = 2;\nconst octalRadix = 8;\nconst testCharsCount = 2;\nconst ERROR_MESSAGE = 'Cannot convert a Symbol value to a number';\n\nconst castNumber = testCharsCount.constructor;\nconst pStrSlice = ERROR_MESSAGE.slice;\n\nconst binaryRegex = /^0b[01]+$/i;\nconst RegExpConstructor = binaryRegex.constructor;\n// Note that in IE 8, RegExp.prototype.test doesn't seem to exist: ie, \"test\" is\n// an own property of regexes. wtf.\nconst {test} = binaryRegex;\nconst isBinary = function isBinary(value) {\n  return test.call(binaryRegex, value);\n};\n\nconst octalRegex = /^0o[0-7]+$/i;\nconst isOctal = function isOctal(value) {\n  return test.call(octalRegex, value);\n};\n\nconst nonWSregex = new RegExpConstructor('[\\u0085\\u180e\\u200b\\ufffe]', 'g');\nconst hasNonWS = function hasNonWS(value) {\n  return test.call(nonWSregex, value);\n};\n\nconst invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;\nconst isInvalidHexLiteral = function isInvalidHexLiteral(value) {\n  return test.call(invalidHexLiteral, value);\n};\n\nconst assertNotSymbol = function assertNotSymbol(value) {\n  if (isSymbol(value)) {\n    throw new TypeError(ERROR_MESSAGE);\n  }\n\n  return value;\n};\n\nconst parseBase = function parseBase(value, radix) {\n  return $parseInt(pStrSlice.call(value, testCharsCount), radix);\n};\n\nconst parseString = function parseString(toNum, value) {\n  if (isBinary(value)) {\n    return toNum(parseBase(value, binaryRadix));\n  }\n\n  if (isOctal(value)) {\n    return toNum(parseBase(value, octalRadix));\n  }\n\n  return null;\n};\n\nconst convertString = function convertString(toNum, value) {\n  const val = parseString(toNum, value);\n\n  if (val !== null) {\n    return val;\n  }\n\n  if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n    return NAN;\n  }\n\n  const trimmed = trim(value);\n\n  if (trimmed !== value) {\n    return toNum(trimmed);\n  }\n\n  return null;\n};\n\n/**\n * This method converts argument to a value of type Number. (ES2019).\n *\n * @param {*} [argument] - The argument to convert to a number.\n * @throws {TypeError} - If argument is a Symbol or not coercible.\n * @returns {*} The argument converted to a number.\n */\nconst toNumber = function toNumber(argument) {\n  const value = assertNotSymbol(toPrimitive(argument, castNumber));\n\n  if (typeof value === 'string') {\n    const val = convertString(toNumber, value);\n\n    if (val !== null) {\n      return val;\n    }\n  }\n\n  return castNumber(value);\n};\n\nexport default toNumber;\n","/**\n * This method determines whether the passed value is NaN and its type is\n * `Number`. It is a more robust version of the original, global isNaN().\n *\n * @param {*} [value] - The value to be tested for NaN.\n * @returns {boolean} `true` if the given value is NaN and its type is Number;\n *  otherwise, `false`.\n */\nconst isNaN = function isNaN(value) {\n  /* eslint-disable-next-line no-self-compare */\n  return value !== value;\n};\n\nexport default isNaN;\n","import numberIsNaN from 'is-nan-x';\nimport INFINITY from 'infinity-x';\n\n/**\n * This method determines whether the passed value is a finite number.\n *\n * @param {*} [number] - The value to be tested for finiteness.\n * @returns {boolean} A Boolean indicating whether or not the given value is a finite number.\n */\nconst isFinite = function isFinite(number) {\n  return typeof number === 'number' && numberIsNaN(number) === false && number !== INFINITY && number !== -INFINITY;\n};\n\nexport default isFinite;\n","/**\n * The constant value Infinity derived mathematically by 1 / 0.\n *\n * @type number\n */\nexport default 1 / 0;\n","import toNumber from 'to-number-x';\nimport numberIsNaN from 'is-nan-x';\n\n/**\n * This method returns the sign of a number, indicating whether the number is positive,\n * negative or zero. (ES2019).\n *\n * @param {*} x - A number.\n * @returns {number} A number representing the sign of the given argument. If the argument\n * is a positive number, negative number, positive zero or negative zero, the function will\n * return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned.\n */\nconst sign = function sign(x) {\n  const n = toNumber(x);\n\n  if (n === 0 || numberIsNaN(n)) {\n    return n;\n  }\n\n  return n > 0 ? 1 : -1;\n};\n\nexport default sign;\n","import toNumber from 'to-number-x';\nimport numberIsNaN from 'is-nan-x';\nimport numberIsFinite from 'is-finite-x';\nimport mathSign from 'math-sign-x';\n\nconst {abs, floor} = Math;\n\n/**\n * Converts `value` to an integer. (ES2019).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nconst toInteger = function toInteger(value) {\n  const number = toNumber(value);\n\n  if (numberIsNaN(number)) {\n    return 0;\n  }\n\n  if (number === 0 || numberIsFinite(number) === false) {\n    return number;\n  }\n\n  return mathSign(number) * floor(abs(number));\n};\n\nexport default toInteger;\n","import toInteger from 'to-integer-x';\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object. (ES2019).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nconst toLength = function toLength(value) {\n  const len = toInteger(value);\n\n  // includes converting -0 to +0\n  if (len <= 0) {\n    return 0;\n  }\n\n  if (len > MAX_SAFE_INTEGER) {\n    return MAX_SAFE_INTEGER;\n  }\n\n  return len;\n};\n\nexport default toLength;\n","const string = 'a';\nconst boxedString = {}.constructor(string);\n\n/**\n * Check failure of by-index access of string characters (IE < 9)\n * and failure of `0 in boxedString` (Rhino).\n *\n * `true` if no failure; otherwise `false`.\n *\n * @type boolean\n */\nconst hasBoxed = boxedString[0] === string && 0 in boxedString;\n\nexport default hasBoxed;\n","import hasBoxed from 'has-boxed-string-x';\nimport isString from 'is-string';\n\nconst EMPTY_STRING = '';\nconst strSplit = EMPTY_STRING.split;\nconst isStringFn = hasBoxed === false && typeof strSplit === 'function' && isString;\n\n/**\n * This method tests if a value is a string with the boxed bug; splits to an\n * array for iteration; otherwise returns the original value.\n *\n * @param {*} [value] - The value to be tested.\n * @returns {*} An array or characters if value was a string with the boxed bug;\n *  otherwise the value.\n */\nconst splitIfBoxedBug = function splitIfBoxedBug(value) {\n  return isStringFn && isStringFn(value) ? strSplit.call(value, EMPTY_STRING) : value;\n};\n\nexport default splitIfBoxedBug;\n","import toObject from 'to-object-x';\nimport toInteger from 'to-integer-x';\nimport toLength from 'to-length-x';\nimport splitIfBoxedBug from 'split-if-boxed-bug-x';\n\nconst getMax = function _getMax(a, b) {\n  return a >= b ? a : b;\n};\n\nconst getMin = function _getMin(a, b) {\n  return a <= b ? a : b;\n};\n\nconst setRelative = function _setRelative(value, length) {\n  return value < 0 ? getMax(length + value, 0) : getMin(value, length);\n};\n\n/**\n * The slice() method returns a shallow copy of a portion of an array into a new\n * array object selected from begin to end (end not included). The original\n * array will not be modified.\n *\n * @param {!object} arrayLike - The array like object to slice.\n * @param {number} [start] - Zero-based index at which to begin extraction.\n *  A negative index can be used, indicating an offset from the end of the\n *  sequence. Running slice(-2) extracts the last two elements in the sequence.\n *  If begin is undefined, slice begins from index 0.\n * @param {number} [end] - Zero-based index before which to end extraction.\n *  Slice extracts up to but not including end. For example, slice([0,1,2,3,4],1,4)\n *  extracts the second element through the fourth element (elements indexed\n *  1, 2, and 3).\n *  A negative index can be used, indicating an offset from the end of the\n *  sequence. Running slice(2,-1) extracts the third element through the second-to-last\n *  element in the sequence.\n *  If end is omitted, slice extracts through the end of the sequence (arr.length).\n *  If end is greater than the length of the sequence, slice extracts through\n *  the end of the sequence (arr.length).\n * @returns {Array} A new array containing the extracted elements.\n */\nconst slice = function slice(arrayLike, start, end) {\n  const iterable = splitIfBoxedBug(toObject(arrayLike));\n  const length = toLength(iterable.length);\n  let k = setRelative(toInteger(start), length);\n  const relativeEnd = typeof end === 'undefined' ? length : toInteger(end);\n  const finalEnd = setRelative(relativeEnd, length);\n  const val = [];\n  val.length = getMax(finalEnd - k, 0);\n  let next = 0;\n  while (k < finalEnd) {\n    if (k in iterable) {\n      val[next] = iterable[k];\n    }\n\n    next += 1;\n    k += 1;\n  }\n\n  return val;\n};\n\nexport default slice;\n","import assertIsFunction from 'assert-is-function-x';\nimport slice from 'array-slice-x';\nimport attempt from 'attempt-x';\nimport isPrimitive from 'is-primitive';\n\nconst nb = assertIsFunction.bind;\nconst nativeBind = typeof nb === 'function' && nb;\n\nlet isWorking;\n\nif (nativeBind) {\n  /* eslint-disable-next-line no-void */\n  let gra = void 0;\n  /* eslint-disable-next-line no-void */\n  let context = void 0;\n  /* eslint-disable-next-line no-unused-vars */\n  const fn = function fn(arg1, arg2) {\n    /* eslint-disable-next-line babel/no-invalid-this */\n    context = this;\n    gra = arg1;\n\n    /* eslint-disable-next-line prefer-rest-params */\n    return arguments;\n  };\n\n  const testThis = [];\n  let res = attempt.call(fn, nativeBind, testThis, 1);\n  isWorking = res.threw === false && typeof res.value === 'function';\n\n  if (isWorking) {\n    res = attempt(res.value, 2, 3);\n    isWorking = res.threw === false && gra === 1 && context === testThis && res.value.length === 3;\n  }\n\n  if (isWorking) {\n    const oracle = [1, 2, 3];\n\n    const Ctr = function Ctr() {\n      isWorking = this !== oracle;\n\n      return oracle;\n    };\n\n    res = attempt.call(Ctr, nativeBind, null);\n    isWorking = res.threw === false && typeof res.value === 'function';\n\n    if (isWorking) {\n      res = attempt(() => {\n        /* eslint-disable-next-line babel/new-cap,new-cap */\n        return new res.value();\n      });\n\n      if (isWorking) {\n        isWorking = res.threw === false && res.value === oracle;\n      }\n    }\n  }\n}\n\n/* eslint-disable-next-line no-unused-vars */\nconst patchedBind = function bind(target, thisArg) {\n  /* eslint-disable-next-line prefer-rest-params */\n  return nativeBind.apply(assertIsFunction(target), slice(arguments, 1));\n};\n\nconst concat = function concat(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = slice(a);\n  result.length += bLength;\n  for (let index = 0; index < bLength; index += 1) {\n    result[aLength + index] = b[index];\n  }\n\n  return result;\n};\n\n/* eslint-disable-next-line lodash/prefer-noop */\nconst Empty = function Empty() {};\n\nexport const implementation = function bind(target, thisArg) {\n  assertIsFunction(target);\n  /* eslint-disable-next-line prefer-rest-params */\n  const args = slice(arguments, 2);\n  let bound;\n\n  const binder = function _binder() {\n    /* eslint-disable-next-line babel/no-invalid-this */\n    if (this instanceof bound) {\n      /* eslint-disable-next-line babel/no-invalid-this,prefer-rest-params */\n      const result = target.apply(this, concat(args, arguments));\n\n      /* eslint-disable-next-line babel/no-invalid-this */\n      return isPrimitive(result) ? this : result;\n    }\n\n    /* eslint-disable-next-line prefer-rest-params */\n    return target.apply(thisArg, concat(args, arguments));\n  };\n\n  let boundLength = target.length - args.length;\n\n  if (boundLength < 0) {\n    boundLength = 0;\n  }\n\n  const lastIndex = boundLength - 1;\n  let boundArgs = '';\n  for (let index = 0; index < boundLength; index += 1) {\n    boundArgs += `$_${index}_$${index < lastIndex ? ',' : ''}`;\n  }\n\n  /* eslint-disable-next-line no-new-func */\n  bound = Function('binder', 'slice', `return function (${boundArgs}){ return binder.apply(this,slice(arguments)); }`)(\n    binder,\n    slice,\n  );\n\n  if (target.prototype) {\n    Empty.prototype = target.prototype;\n    bound.prototype = new Empty();\n    Empty.prototype = null;\n  }\n\n  return bound;\n};\n\n/**\n * The bind() method creates a new function that, when called, has its this\n * keyword set to the provided value, with a given sequence of arguments\n * preceding any provided when the new function is called.\n *\n * @param {Function} target - The target function.\n * @param {*} thisArg - The value to be passed as the this parameter to the target\n *  function when the bound function is called. The value is ignored if the\n *  bound function is constructed using the new operator.\n * @param {*} [args] - Arguments to prepend to arguments provided to the bouund\n *  function when invoking the target function.\n * @throws {TypeError} If target is not a function.\n * @returns {Function} The bound function.\n */\nconst $bind = isWorking ? patchedBind : implementation;\n\nexport default $bind;\n"],"sourceRoot":""}